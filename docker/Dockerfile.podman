# FROM ubuntu:20.04
# FROM ubuntu:22.04
# FROM ubuntu:latest
# FROM ubuntu:rolling
# FROM nvidia/cuda:11.7.1-cudnn8-runtime-ubuntu20.04
FROM nvidia/cuda:12.0.1-cudnn8-runtime-ubuntu22.04
# FROM nvidia/cuda:12.1.1-devel-ubuntu22.04 as base

ARG TYPE="invoke-ai"

LABEL maintainer="gabr1elt"
LABEL repository="InvokeAI"
LABEL type=$TYPE

USER root
ARG USERNAME="root"
ARG HOME="/"$USERNAME
WORKDIR $HOME

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && \
    # apt-get install -y --no-install-recommends \
    apt-get install -y \
        bash \
        sudo \
        ranger \
        byobu \
        build-essential \
        git \
        git-lfs \
        curl \
        wget \
        ca-certificates \
        libsndfile1-dev \
        python3 \
        python3-pip \
        python3-venv && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

# # Creating the user and usergroup

# ARG USERNAME="user"
# ARG USER_UID=2000
# ARG USER_GID=$USER_UID
# ARG HOME="/home/"$USERNAME

# # RUN adduser --disabled-password --gecos '' $USERNAME
# RUN groupadd --gid $USER_GID $USERNAME && \
#     useradd --uid $USER_UID --gid $USERNAME -m -s /bin/bash $USERNAME

# # sudo no password
# RUN echo $USERNAME ALL=\(root\) NOPASSWD:ALL >/etc/sudoers.d/$USERNAME && \
#     chmod 0440 /etc/sudoers.d/$USERNAME

# USER $USERNAME
# WORKDIR $HOME

# # install vscode server

# RUN curl -fsSL "https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64" -o /tmp/vscode-cli.tar.gz && \
#     tar -xf /tmp/vscode-cli.tar.gz -C /usr/local/bin && \
#     rm /tmp/vscode-cli.tar.gz

# # install open vscode server

# ARG RELEASE_TAG="openvscode-server-v1.78.0"
# ARG OPENVSCODE_SERVER_ROOT=$HOME"/.openvscode-server"

# # Downloading the latest VSC Server release and extracting the release archive
# RUN curl -fsSL https://github.com/gitpod-io/openvscode-server/releases/download/${RELEASE_TAG}/${RELEASE_TAG}-linux-x64.tar.gz -o /tmp/${RELEASE_TAG}-linux-x64.tar.gz && \
#     tar -xzf /tmp/${RELEASE_TAG}-linux-x64.tar.gz -C /tmp && \
#     mv -f /tmp/${RELEASE_TAG}-linux-x64 ${OPENVSCODE_SERVER_ROOT} && \
#     rm -f /tmp/${RELEASE_TAG}-linux-x64.tar.gz && \
#     cp ${OPENVSCODE_SERVER_ROOT}/bin/remote-cli/openvscode-server ${OPENVSCODE_SERVER_ROOT}/bin/remote-cli/code

# install python packages

# make sure to use venv
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# pre-install the heavy dependencies (these can later be overridden by the deps from setup.py)
# RUN python3 -m pip install --no-cache-dir --upgrade pip
RUN python3 -m pip install --no-cache-dir \
        torch \
        torchvision \
        torchaudio
RUN python3 -m pip install --no-cache-dir \
        accelerate \
        datasets \
        # hf-doc-builder \
        # huggingface-hub \
        Jinja2 \
        librosa \
        numpy \
        scipy \
        tensorboard \
        transformers \
        diffusers
RUN python3 -m pip install --no-cache-dir \
        ipykernel \
        safetensors \
        torch-tb-profiler \
        xformers \
        triton \
        pypatchmatch \
        compel

RUN apt-get update && \
    # apt-get install -y --no-install-recommends \
    apt-get install -y \
        python3-opencv \
        # fix for PyPatchMatch compile error
        libopencv-dev \
        # fix for 'Could not load library libcudnn_cnn_infer.so.8'
        nvidia-cudnn && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

# install InvokeAI

RUN python3 -m pip install --no-cache-dir \
        "InvokeAI[xformers]" \
        --use-pep517 \
        --extra-index-url https://download.pytorch.org/whl/cu117

# or

# # Set working directory and env
# ARG APPNAME=InvokeAI
# ARG APPDIR=/usr/src/${APPNAME}
# WORKDIR ${APPDIR}
# # ENV PATH ${APPDIR}/bin:$PATH

# # # Create virtual environment
# # RUN --mount=type=cache,target=${PIP_CACHE_DIR} \
# #   python3 -m venv "${APPNAME}" \
# #   --upgrade-deps

# # # Install requirements
# # COPY --link pyproject.toml .
# # COPY --link invokeai/version/invokeai_version.py invokeai/version/__init__.py invokeai/version/
# # ARG PIP_EXTRA_INDEX_URL
# # ENV PIP_EXTRA_INDEX_URL ${PIP_EXTRA_INDEX_URL}
# # # RUN --mount=type=cache,target=${PIP_CACHE_DIR} \
# # #   "${APPNAME}"/bin/pip install .
# # RUN python3 -m pip install --no-cache-dir \
# #   .[xformers]

# # Install pyproject.toml
# # COPY --link . .
# # RUN --mount=type=cache,target=${PIP_CACHE_DIR} \
# #   "${APPNAME}/bin/pip" install .
# COPY . .
# # CUDA
# ARG PIP_EXTRA_INDEX_URL="https://download.pytorch.org/whl/cu117" 
# ENV PIP_EXTRA_INDEX_URL ${PIP_EXTRA_INDEX_URL}
# RUN python3 -m pip install --no-cache-dir \
#   .[xformers]

# Build patchmatch
RUN python3 -c "from patchmatch import patch_match"

# # Create a new user
# ARG UNAME=appuser
# RUN useradd \
#   --no-log-init \
#   -m \
#   -U \
#   "${UNAME}"

# # Create volume directory
# ARG VOLUME_DIR=/data
# RUN mkdir -p "${VOLUME_DIR}" \
#   && chown -hR "${UNAME}:${UNAME}" "${VOLUME_DIR}"

# Setup runtime environment
# USER ${UNAME}:${UNAME}
# COPY --chown=${UNAME}:${UNAME} --from=pyproject-builder ${APPDIR}/${APPNAME} ${APPNAME}
# ENV INVOKEAI_ROOT ${VOLUME_DIR}
ENV INVOKEAI_ROOT ${HOME}"/storage"
RUN mkdir -p ${INVOKEAI_ROOT}
# ENV TRANSFORMERS_CACHE ${VOLUME_DIR}/.cache
ENV INVOKE_MODEL_RECONFIGURE "--yes --default_only"
EXPOSE 9090
ENTRYPOINT [ "invokeai" ]
CMD [ "--web", "--host", "0.0.0.0", "--port", "9090" ]
# VOLUME [ "${VOLUME_DIR}" ]

# # wokdir
# ARG WORKSPACE_ROOT=$HOME"/Development"
# RUN mkdir -p $WORKSPACE_ROOT

# WORKDIR $WORKSPACE_ROOT

# ENV LANG=C.UTF-8 \
#     LC_ALL=C.UTF-8 \
#     EDITOR=code \
#     VISUAL=code \
#     GIT_EDITOR="code --wait" \
# #     OPENVSCODE_SERVER_ROOT=${OPENVSCODE_SERVER_ROOT} \
# #     HOME=${WORKSPACE_ROOT} \
#     WORKSPACE_ROOT=${WORKSPACE_ROOT}

# # vscode
# CMD [ "code", "tunnel", "--accept-server-license-terms", "--disable-telemetry" ]
# EXPOSE 3000
# CMD [ "/bin/sh", "-c", "${OPENVSCODE_SERVER_ROOT}/bin/openvscode-server --host 0.0.0.0 --without-connection-token \"${@}\"", "--" ]
